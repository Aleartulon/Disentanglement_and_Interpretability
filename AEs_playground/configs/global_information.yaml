physics_model: 'datasets/gaussian_shape' # this is the Path to a directory for the training on a given dataset
description: 'AE/invertible' #for a given dataset, one can train with different hyperparameters, hence the 'description'
epochs: 5000 #maximum number of epochs
learning_rate: 0.001 #initial learning rate
dim_input: [1, 2]  # first dimension is # of channels (one if the predicted solution is a scalar field), second is spatial dimensions per channel.
side_size : 128 # length of each dimension of the input field
gamma_lr: 0.99 # gamma of  tc.optim.lr_scheduler.ExponentialLR()
batch_size : 32 # batch size. If using POD, this should be equal to the whole batch of training data available
warmup_lr: 10 # number of epochs of warmup of the learning rate
clipping: [0, 2.5] #[if 1 clipping is applied, maximum norm allowed to gradients]
model : "AE" # defines the type of model to use: AE (AutoEncoder), VAE (VariationalAutoEncoder), FNO (FourierNeuralOperator)
class_name : 'AutoEncoder'
device : 'cuda:1' #device where to train, if not on GPU just write 'cpu'
num_workers : 8 #number of workers of dataloaders
data_path : '../../../../../scratch/aalelonghi/gaussian_shapes/' #path of training and validation data
training_data_path : 'training_field.npy'
validation_data_path : 'validation_field.npy'
checkpoint: false  # if true uses existing checkpoint
normalization_field_ma : [True, 1.0] # if true, maxima of each dimension of the solution fields are found. If not, dimension 1,2, etc are the maxima of dimension 1,2, etc of the solution field (only one if it is a scalar field)
normalization_field_mi : [True, 0.0] # if true, minima of each dimension of the solution fields are found. If not, dimension 1,2, etc are the minima of dimension 1,2, etc of the solution field (only one if it is a scalar field)